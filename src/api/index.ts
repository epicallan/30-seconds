import * as fs from 'fs';
import * as csv from 'fast-csv';
import * as R from 'ramda';
import * as prettier from 'prettier';

const result: any[] = [];
const stream = fs.createReadStream('./src/api/30-seconds.csv');

csv
  .fromStream(stream)
  .on('data', (data: any) => {
    result.push(data);
  })
  .on ('error', console.error)
  .on('end', (data) => {
    const flat = flatten(result);
    const random = randomize(flat);
    const json = JSON.stringify(createGroupedArray(random, 5));
    const content = prettier.format(`
          /*ts-lint disable*/ \n // this file is autogenerated \n
          export default ${json}`, {singleQuote: true});
    fs.writeFile('./src/components/Card/data.ts', content, (err) => {
      if (err) {
          console.error(err);
          return;
      }
      console.log('File has been created');
    });
  });

const flatten = arr =>
  R.flatten(arr).filter((word) => word && word.length);

const randomize = (arr) => {
  arr.forEach((name, index) => {
    const randomIndex = Math.floor(Math.random() * (arr.length));
    const itemAtIndex = arr[randomIndex];
    arr[randomIndex] = arr[arr.length - 1];
    arr[arr.length - 1] = itemAtIndex;
  });
  return arr;
};

const createGroupedArray = (arr: any, chunkSize: number) => {
  const groups: any[] = [];
  for (let i = 0; i < arr.length; i += chunkSize) {
      const sliced: any[] = arr.slice(i, i + chunkSize);
      groups.push(sliced);
  }
  return groups;
};
